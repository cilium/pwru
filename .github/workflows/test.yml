name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8

    - name: Set up Go
      uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568
      with:
        go-version: 1.18

    - name: Check module vendoring
      run: |
        go mod tidy
        go mod vendor
        go mod verify
        test -z "$(git status --porcelain)" || (echo "please run 'go mod tidy && go mod vendor', and submit your changes"; exit 1)

    - name: Cache LLVM and Clang
      id: cache-llvm
      uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
      with:
        path: $HOME/.clang
        key: llvm-12.0

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@8852e4d5c58653ed05135c0a5d949d9c2febcb00
      with:
        ubuntu-version: "20.04"
        version: "12.0.0"
        directory: $HOME/.clang
        cached: ${{ steps.cache-llvm.outputs.cache-hit }}

    - name: Generate
      run: go generate .

    - name: Build
      run: go build .

    - name: Store executable
      uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb
      with:
        name: pwru
        path: pwru

  test:
    runs-on: self-hosted
    name: Test
    strategy:
      fail-fast: false
      matrix:
        kernel: [ '5.4-main', '5.15-main', 'bpf-next-main' ]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8

      - name: Retrieve stored pwru executable
        uses: actions/download-artifact@v3
        with:
          name: pwru
          path: pwru

      - name: Run tests
        uses: cilium/little-vm-helper@2a076423707ff588c2b0ed676d835e779b4c4af4
        with:
          test-name: pwru-test
          image-version: ${{ matrix.kernel }}
          host-mount: ./
          cmd: |
            set -x

            chmod +x /host/pwru/pwru

            # Block traffic to both endpoints, so that we can see kfree_skb*
            # in traces (test assertion)
            iptables -I OUTPUT 1 -m tcp --proto tcp --dst 1.0.0.1/32 -j DROP
            ip6tables -I OUTPUT 1 -m tcp --proto tcp --dst 2606:4700:4700::1001 -j DROP

            i=0
            for addr in '1.0.0.1' '2606:4700:4700::1001'; do
              i=\$((i+1))
              /host/pwru/pwru --filter-dst-ip="\$addr" --output-tuple \
                --output-file=/tmp/pwru-\$i.log \
                --ready-file=/tmp/pwru-\$i.ready 2>/tmp/pwru-\$i.status &
              PWRU_PID=\$!

              while [ ! -f /tmp/pwru-\$i.ready ]; do sleep 1; done

              url=\$addr
              if \$(echo \$addr | grep -q ':'); then url="[\$addr]"; fi
              echo \$url

              curl -vvv -sS --fail --connect-timeout "1" -o /dev/null http://\$url || true

              kill \$PWRU_PID
              wait \$PWRU_PID

              grep "kfree_skb" /tmp/pwru-\$i.log | grep -F "\${url}:80"
            done

      - name: Fetch artifacts
        if: ${{ !success() }}
        uses: cilium/little-vm-helper@2a076423707ff588c2b0ed676d835e779b4c4af4
        with:
          provision: 'false'
          cmd: |
            cat /tmp/pwru-*.status || true
            cat /tmp/pwru-*.ready || true
            cat /tmp/pwru-*.log || true
